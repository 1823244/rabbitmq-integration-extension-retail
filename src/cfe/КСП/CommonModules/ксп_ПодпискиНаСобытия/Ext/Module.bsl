
Процедура ксп_ПриЗаписиДокументаПриЗаписи(Источник, Отказ) Экспорт

	Если Источник.обменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;

	Если НеВыполнятьРегистрацию(Источник) Тогда
		Возврат;
	КонецЕсли;

	Узел = ксп_ЭкспортСлужебныйПовтИсп.Константы_ксп_УзелОбменаRabbit();
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		
		ЗаписьЖурналаРегистрации("Экспорт_из_ЕРП", УровеньЖурналаРегистрации.Предупреждение,,Источник.Ссылка,
			"Не установлена константа ксп_УзелОбменаRabbit! Регистрация документа в плане обмена Кодерлайн_интеграция не выполнена!");
		Возврат;
	КонецЕсли;

	ПланыОбмена.ЗарегистрироватьИзменения(Узел, Источник.Ссылка);
	
КонецПроцедуры

Процедура ксп_ПриЗаписиСправочникаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.обменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;

	Если НеВыполнятьРегистрацию(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Узел = ксп_ЭкспортСлужебныйПовтИсп.Константы_ксп_УзелОбменаRabbit();
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		
		ЗаписьЖурналаРегистрации("Экспорт_из_ЕРП", УровеньЖурналаРегистрации.Предупреждение,,Источник.Ссылка,
			"Не установлена константа ксп_УзелОбменаRabbit! Регистрация справочника в плане обмена Кодерлайн_интеграция не выполнена!");
		Возврат;
	КонецЕсли;

	ПланыОбмена.ЗарегистрироватьИзменения(Узел, Источник.Ссылка);
	
КонецПроцедуры


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НеВыполнятьРегистрацию(Источник) Экспорт
	
	ВыполнитьРегистрацию = Ложь;
	НеРегистрироватьКОбменуRabbitMQ = Неопределено;
	Успешно = Источник.ДополнительныеСвойства.Свойство("НеРегистрироватьКОбменуRabbitMQ", НеРегистрироватьКОбменуRabbitMQ);
	Если Успешно Тогда
		Если НеРегистрироватьКОбменуRabbitMQ = Истина Тогда
			//Свойство есть, там Истина - не выполняем регистрацию в плане обмена
			Возврат Истина; 
		Иначе 
			Возврат Ложь;
		КонецЕсли;
	Иначе 
		//Свойства нет - регистрируем
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

